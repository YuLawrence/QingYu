<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[object Object]</title>
    <link href="/2021/09/09/%E4%BC%9F%E5%A4%A7%E9%A2%86%E8%A2%96/"/>
    <url>/2021/09/09/%E4%BC%9F%E5%A4%A7%E9%A2%86%E8%A2%96/</url>
    
    <content type="html"><![CDATA[<h1 id="值伟大领袖逝世-45-周年之际，谨以最崇高的敬意怀念毛主席"><a href="#值伟大领袖逝世-45-周年之际，谨以最崇高的敬意怀念毛主席" class="headerlink" title="值伟大领袖逝世 45 周年之际，谨以最崇高的敬意怀念毛主席"></a>值伟大领袖逝世 45 周年之际，谨以最崇高的敬意怀念毛主席</h1>]]></content>
    
    
    <categories>
      
      <category>有感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伟大领袖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[object Object]</title>
    <link href="/2021/08/30/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/08/30/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>一、ArrayList 和 LinkedList 的区别</p><blockquote><p>最本质的区别是数组和链表的区别</p></blockquote><ol><li>数组和链表的区别</li></ol><p><strong>数组</strong>（Array）是有序的元素序列（来自百度百科的定义）。通俗点来说数组是有序存放同类型数据元素的集合。对于数组元素的操作，想要随机访问某一元素可以通过下标直接访问，时间复杂度是 O(1)。但是如果在数组中间增加和删除元素，就需要移动修改位置之后的所有元素。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java容器类详解</title>
    <link href="/2021/08/17/Java%E5%AE%B9%E5%99%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/08/17/Java%E5%AE%B9%E5%99%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java 容器类主要分为以下两类：</p></blockquote><h3 id="一、Collection"><a href="#一、Collection" class="headerlink" title="一、Collection"></a>一、Collection</h3><h4 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h4><ul><li><p><strong>LinkedList</strong></p></li><li><p><strong>ArrayList</strong></p></li><li><p><strong>Vector</strong></p><ul><li><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a><strong>Stack</strong></h4></li></ul></li></ul><h4 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h4><h4 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h4><h3 id="二、Map"><a href="#二、Map" class="headerlink" title="二、Map"></a>二、Map</h3><ul><li><strong>HashMap</strong></li><li><strong>HashTable</strong></li><li><strong>LinkedHashMap</strong></li><li><strong>TreeMap</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试经验</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java容器类</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Oracle插入纪录如何同时返回主键</title>
    <link href="/2021/08/17/%E5%85%B3%E4%BA%8EOracle%E6%8F%92%E5%85%A5%E7%BA%AA%E5%BD%95%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE/"/>
    <url>/2021/08/17/%E5%85%B3%E4%BA%8EOracle%E6%8F%92%E5%85%A5%E7%BA%AA%E5%BD%95%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天上午开发中遇到的一个问题，之前也确实没有使用，写了好久才解决。</p></blockquote><h3 id="1-问题由来"><a href="#1-问题由来" class="headerlink" title="1.问题由来"></a>1.问题由来</h3><p>前端需要在调用插入方法后获取相应的 id 主键。使用的是 Oracle 的数据库，Oracle 的主键是采用序列自增的。</p><h3 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2.实现思路"></a>2.实现思路</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">insert</span> id<span class="hljs-operator">=</span>&quot;id&quot; parameterType<span class="hljs-operator">=</span>&quot;com.lawrence.entity.User&quot; useGeneratedKeys<span class="hljs-operator">=</span>&quot;true&quot; keyProperty<span class="hljs-operator">=</span>&quot;id&quot; <span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span>selectKey resultType<span class="hljs-operator">=</span>&quot;java.lang.Integer&quot; <span class="hljs-keyword">order</span><span class="hljs-operator">=</span>&quot;BEFORE&quot; keyProperty<span class="hljs-operator">=</span>&quot;id&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">select</span> SEQ_USER.nextval <span class="hljs-keyword">as</span> id <span class="hljs-keyword">from</span> DUAL<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>selectKey<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">User</span>(ID,NAME)<br>    <span class="hljs-keyword">values</span>(#&#123;id&#125;,#&#123;name&#125;)<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">insert</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-用到的关键字解释："><a href="#3-用到的关键字解释：" class="headerlink" title="3.用到的关键字解释："></a>3.用到的关键字解释：</h3><ul><li>useGeneratedKeys=”true” ：使用自动增长的主键</li><li>keyProperty=”id” ：将返回值赋给指定的列</li><li>order=”before” ：设置 selectKey 中包含的语句先执行</li></ul><h3 id="4-具体应用"><a href="#4-具体应用" class="headerlink" title="4.具体应用"></a>4.具体应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Systemt.out.println(user.getId);      <span class="hljs-comment">// 此时插入前主键为空值</span><br>userMapper.insertUser(user);<br>Systemt.out.println(user.getId);      <span class="hljs-comment">// 此时的ID已经为插入后的主键</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遍历循环遇到的问题</title>
    <link href="/2021/08/16/%E9%81%8D%E5%8E%86%E5%BE%AA%E7%8E%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/16/%E9%81%8D%E5%8E%86%E5%BE%AA%E7%8E%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天又是蠢蠢的一天，再再再再一次因为写错导致排查半天的错误</p></blockquote><h3 id="1-话不多说，直接复现了一下问题"><a href="#1-话不多说，直接复现了一下问题" class="headerlink" title="1.话不多说，直接复现了一下问题"></a>1.话不多说，直接复现了一下问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">questionnair</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 错误写法：循环体外复用一个对象</span><br>        <span class="hljs-comment">// User user = new User();</span><br>        User user;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// 正确写法 或 方案一：User user = new User();</span><br>            <span class="hljs-comment">// 方案二</span><br>            user = <span class="hljs-keyword">new</span> User();<br>            user.setId(i);<br>            user.setName(<span class="hljs-string">&quot;你猜&quot;</span> + i);<br>            userList.add(user);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (User user2 : userList) &#123;<br>            System.out.println(user2);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Integer id;<br>        <span class="hljs-keyword">private</span> String name;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-打印结果"><a href="#2-打印结果" class="headerlink" title="2.打印结果"></a>2.打印结果</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs autoit">错误结果：此时想要的集合元素其实都是同一个对象；<br>questionnair$User<span class="hljs-symbol">@368239c8</span><br>questionnair$User<span class="hljs-symbol">@368239c8</span><br>questionnair$User<span class="hljs-symbol">@368239c8</span><br>questionnair$User<span class="hljs-symbol">@368239c8</span><br>questionnair$User<span class="hljs-symbol">@368239c8</span><br><br>正确结果：明显可以看出 这是正确放入集合中的元素<br>questionnair$User<span class="hljs-symbol">@368239c8</span><br>questionnair$User<span class="hljs-symbol">@9e89d68</span><br>questionnair$User<span class="hljs-symbol">@3b192d32</span><br>questionnair$User<span class="hljs-symbol">@16f65612</span><br>questionnair$User<span class="hljs-symbol">@311d617d</span><br></code></pre></td></tr></table></figure><h3 id="3-出现这种问题的原因所在："><a href="#3-出现这种问题的原因所在：" class="headerlink" title="3.出现这种问题的原因所在："></a>3.出现这种问题的原因所在：</h3><ol><li><p>我的想法：</p><p>首先我想的是虽然都是同一个对象，但是我每次赋的都是新值且赋值前都放入了集合中，“按理说”应该是不同的元素。</p></li><li><p>实际上：</p><p>因为只 new 了一个对象，所以在内存中只为这一个对象开辟了存储空间。而实例变量 user 是指向该对象存储空间的地址，例如 0X12345。当 i = 1 时，赋给它的值为 1；id = 1,name = “你猜 1”；虽然在下一轮循环中，重新赋了值，即 id = 2,name = “你猜 2”；但是放入集合中的两个元素，其实都是指向 0X12345，所以 list 中的元素 都是最新的同一个对象，自然就不是想要的结果。</p></li><li><p>正确的原因</p><p>同理可知，每次循环 new 一个对象，并赋予它不同的值，得到的结果自然是不通的对象。不过需要注意的是，在循环体中声明对象，如方案一的方法 每次循环都会创建一份对象引用，如果循环次数就会非常消耗内存，更深的细节就设计 Jvm 底层远离了，就不做更多的叙述了，有兴趣了解的可以去查阅一下。</p></li></ol><blockquote><p>涉及到的知识点：Java 的值传递和对象地址传递，都是一些很基础的知识点，由此可见基础对于开发的重要性；</p></blockquote><h3 id="4-有更多理解和有错误所在的请不吝讲解，相互学习。"><a href="#4-有更多理解和有错误所在的请不吝讲解，相互学习。" class="headerlink" title="4.有更多理解和有错误所在的请不吝讲解，相互学习。"></a>4.有更多理解和有错误所在的请不吝讲解，相互学习。</h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础，for循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle 中 nvl 的用法</title>
    <link href="/2021/08/10/Oracle%E4%B8%ADnvl%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/08/10/Oracle%E4%B8%ADnvl%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一下平时简单开发中用到的 nvl 函数，加深对 Oracle 常用函数的理解。</p></blockquote><h3 id="1-nvl-的定义（来源于百科）"><a href="#1-nvl-的定义（来源于百科）" class="headerlink" title="1.nvl()的定义（来源于百科）"></a>1.nvl()的定义（来源于百科）</h3><p><a href="https://baike.baidu.com/item/NVL">NVL</a>(E1, E2)的功能为：如果 E1 为 NULL，则函数返回 E2，否则返回 E1 本身。但此函数有一定局限，所以就有了 NVL2 函数。</p><p>拓展：NVL2 函数:Oracle/PLSQL 中的一个函数,Oracle 在 NVL 函数的功能上扩展，提供了 NVL2 函数。<a href="https://baike.baidu.com/item/NVL">NVL</a>2(E1, E2, E3)的功能为：如果 E1 为 NULL，则函数返回 E3，若 E1 不为 null，则返回 E2。</p><h3 id="2-nvl-的格式和用法"><a href="#2-nvl-的格式和用法" class="headerlink" title="2.nvl 的格式和用法"></a>2.nvl 的格式和用法</h3><p>nvl(E1,E2);</p><p>要注意 E1 和 E2 的类型要一致，nvl 支持的返回值类型有字符型、日期型、日期时间型、数值型、货币型、逻辑型和 null 值。</p><ul><li>用途一：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span>&#123;id,name&#125;<br><span class="hljs-keyword">select</span> id,nvl(name,&quot;张三&quot;) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure><p>在对所查询的字段使用 nvl，如果查询出来的结果为空值，则返回”张三“。自己在开发中，对于数据库里一些状态字段的数据，有时有的记录没有值但又需要该字段来进行判断，则可以将字段值为 1 的与字段值为 0 或 null 值的区分开来。</p><ul><li>用途二：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span>&#123;id,name&#125;<br><span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> nvl(id,<span class="hljs-number">0</span>) <span class="hljs-operator">=</span> #&#123;id&#125;<br></code></pre></td></tr></table></figure><p>一开始使用也是在这里用的多，同事写的查询方法只查了某个值 = 1 的记录，但是数据库里其他很多记录是 null，在前端显示的话就没有数据，排查出来后就是加了 nvl 函数，如果数据库里有该 id 的记录则正常查询，否则返回该字段为 0;</p><blockquote><p>后续若有其他理解感悟，再回来补充。若有大佬觉得哪里有问题，请不吝赐教。QAQ</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/05/hello-world/"/>
    <url>/2021/07/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bugs</tag>
      
      <tag>报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
